@page "/reservations"
@using TravelessApp.Data

 <div class="container-fluid">
      <div class="row my-2">
        <h2 class="text-center">Reservation Finder</h2>
      </div>
      <div class="row">
        <form class="d-flex flex-row my-1">
          <div class="col mx-1">
            <label for="code" class="form-label">Code:</label>
            <input type="text" id="code" class="form-control form-control-sm" @bind="code">
          </div>
          <div class="col mx-1">
            <label for="airline" class="form-label">Airline:</label>
            <input type="text" id="airline" class="form-control form-control-sm" @bind="airline">
          </div>
          <div class="col mx-1">
            <label for="name" class="form-label">Name:</label>
            <input type="text" id="name" class="form-control form-control-sm" @bind="name">
          </div>
          <div class="col align-self-end">
            <button type="button" class="btn btn-primary btn-sm w-100 btn-block" onclick="@SearchReservation">
              Find reservation
            </button>
          </div>
        </form>
      </div>

      <!-- Reservation result -->

      <div>
        <div class="row my-2">
            <h2 class="text-center">Reservations</h2>
          </div>
        <div class="col">
          <select class="form-select form-select-sm" @bind="matchingReservationCode">
            <option readonly="default">Reservations</option>
            @foreach (var reservation in matchingReservation)
            {
              <option value="@reservation.ReservationCode">@reservation.ReservationCode</option>
            }
          </select>
        </div>
      </div>

      <!-- Reservation form for update -->

      <div class="row my-2">
        <h2 class="text-center">Reserve</h2>
      </div>
      <div class="row my-y">
        <form class="d-flex flex-column my-1">
            <div class="row m-1">
                <label for="reservationcode" class="input-group-text input-group-sm form-label">Reservation Code:</label>
                <input type="text" value="@selectedReservation?.ReservationCode" placeholder="Code" class="form-control" id="reservationcode" readonly>
            </div>
          <div class="row m-1">
            <label for="flightcode" class="input-group-text input-group-sm form-label">Flight Code:</label>
            <input type="text" value="@selectedReservation?.FlightCode" placeholder="Flight Code" class="form-control" id="flightcode" readonly>
          </div>
          <div class="row m-1">
            <label for="airline" class="input-group-text input-group-sm form-label">Airline:</label>
            <input type="text" value="@selectedReservation?.FlightAssociated.Airline" class="form-control" id="airline" readonly placeholder="Airline">
          </div>
          <div class="row m-1">
            <label for="cost" class="input-group-text input-group-sm form-label">Cost:</label>
            <input type="text" value="@selectedReservation?.FlightAssociated.Cost" class="form-control" id="cost" readonly placeholder="0">
          </div>
          <div class="row m-1">
            <label for="name" class="input-group-text input-group-sm form-label">Name:</label>
            @if (selectedReservation != null)
            {
              <input type="text" placeholder="Name" class="form-control" id="name" @bind="selectedReservation.Name">
            }
            else
            {
              <input type="text" placeholder="Name" class="form-control" id="name" disabled>
            }
          </div>
          <div class="row m-1">
            <label for="citizenship" class="input-group-text input-group-sm form-label">Citizenship:</label>
            @if (selectedReservation != null)
            {
              <input type="text" placeholder="Citizenship" class="form-control" id="citizenship" @bind="selectedReservation.Citizenship">
            }
            else
            {
              <input type="text" placeholder="Citizenship" class="form-control" id="citizenship" disabled>
            }
          </div>
          <div class="row m-1">
            <label for="isActive" class="input-group-text input-group-sm form-label">Status:</label>
            <select class="form-select form-select-sm" @bind="updatedReservationStatus">
              @if (selectedReservation != null)
            {
              if (selectedReservation.IsActive)
                {
                  <option selected value="true">Active</option>
                  <option value="false">Inactive</option>
                }
                else
                {
                  <option selected value="false">Inactive</option>
                  <option value="true">Active</option>
                }
              }
              else
              {
                <input type="text" placeholder="Active" class="form-control" id="isActive" readonly>
              }
            </select>
          </div>
          <div class="row m-1">
            <button class="btn btn-primary btn-sm w-100 btn-block" type="button" onclick="@SaveChangesOnFile">Update</button>
          </div>
        </form>
      </div>
    </div>

@code {
  string code;
  string airline;
  string name;
  double cost;
  string matchingReservationCode;
  

  FlightManager flightManager = new ();
  ReservationManager reservationManager = new();
  List<Flight> flights = FlightManager.Flights;
  List<Reservation> reservations = ReservationManager.Reservations;
  List<Reservation> matchingReservation = new();
  Reservation selectedReservation => SelectedReservation();

  string updatedReservationStatus = "true";

  void SearchReservation()
  {
    matchingReservation.Clear();
    
    if (string.IsNullOrEmpty(code) && string.IsNullOrEmpty(name) && string.IsNullOrEmpty(airline))
    {
      matchingReservation.AddRange(reservations);
    }
    else
    {
      matchingReservation.AddRange(reservations.Where(reservation => 
        (string.IsNullOrEmpty(code) || reservation.ReservationCode == code) &&
        (string.IsNullOrEmpty(name) || reservation.Name == name) &&
        (string.IsNullOrEmpty(airline) || reservation.FlightAssociated.Airline == airline)).ToList());
    }

    if (matchingReservation.Count == 0)
    {
      App.Current.MainPage.DisplayAlert("No reservation found", "Please try again.", "Close");
    }
  
    code = null;
    airline = null;
    name = null;
  }

  
  private Reservation SelectedReservation()
  {
    return reservations.FirstOrDefault(reservation => reservation.ReservationCode == matchingReservationCode);
  }

  private void SaveChangesOnFile()
  {
    if (selectedReservation == null)
    {
      App.Current.MainPage.DisplayAlert("No reservation selected", "Please select a reservation first.", "Close");
      return;
    }
    selectedReservation.IsActive = bool.Parse(updatedReservationStatus);

    if (string.IsNullOrEmpty(selectedReservation.Citizenship) || string.IsNullOrEmpty(selectedReservation.Name))
    {
      App.Current.MainPage.DisplayAlert("Missing fields", "Please fill all the fields before editing a reservation.", "Close");
    }
    else
    {
      var index = reservations.FindIndex(r => r.ReservationCode == selectedReservation.ReservationCode);
      if (index != -1)
      {
        reservations[index] = selectedReservation;
      }
      ReservationManager.WriteOnReservationFile();
      matchingReservation.Clear();
      matchingReservationCode = null;
      App.Current.MainPage.DisplayAlert("Saved sucessfully", "Your changes were successfully changed!", "Close");
    }

  }
  
}